## kong-authorizer image parameters
##
image:
  ## Image repository
  ##
  repository: docker.cloudentity.io/kong-authorizer

  ## Image pull policy
  ##
  pullPolicy: IfNotPresent

  ## Image tag (immutable tags are recommended, default is the chart appVersion)
  ##
  tag: ""

## kong-authorizer image registry secret names as an array
##
imagePullSecrets:
  - name: docker.cloudentity.io

## Pod security context
##
podSecurityContext:
  fsGroup: 1000
  runAsGroup: 1000
  runAsNonRoot: true
  runAsUser: 1000

## Container security context
##
containerSecurityContext:
  readOnlyRootFilesystem: true
  allowPrivilegeEscalation: false
  capabilities:
    drop:
      - ALL

## String to fully override kong-authorizer.fullname
##
# fullnameOverride: ""

## Service account to use by the kong-authorizer
##
serviceAccount:
  ## Specifies whether a service account should be created
  ##
  create: true
  ## Annotations to add to the service account
  ##
  annotations: {}
  ## The name of the service account to use.
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

## Issuer URL of your tenant's ACP system workspace
##
## When using kong-authorizer in single-tenant mode, this should point
## to the system workspace of your tenant.
## i.e. "http://authz.cloudentity.io/yourtenant/system"
##
## If you're using multi-tenant kong-authorizer this should point
## to the `system` workspace of your `system` tenant.
## i.e. "http://yourdomain.com/system/system"
##
issuerURL: "https://acp.acp-system:8443/default/system"

## Vanity Domain
## If the issuerURL uses a vanity domain, you will need to specify the tenantID,
## and if the domain is per-server, then you must also specify the serverID.
##
tenantID: ""
serverID: ""

## Pod resources definition
resources: {}
  # requests:
  #   cpu: 10m
  #   memory: 48Mi
  # limits:
  #   cpu: 100m
  #   memory: 96Mi

## Credentials for your ACP kong-authorizer
##
##
clientCredentials:
  ## Specifies whether a kubernetes secret should be created from the provided clientID and clientSecret.
  ## For production setup, please create the secret (ideally encrypted) manually
  ## parameter to integrate with kong-authorizer
  ##
  create: true

  ## The name of the client secret to use
  ## If not set and create is true, a name is generated using the fullname template
  ##
  name: ""

  ## Default dummy values
  ## You can provide credentials generated by ACP for your kong gateway.
  ##
  clientID: "c7c7mgmvd3ibf6k124n0"
  clientSecret: "TuIEmSWHtU-0ftOO7445nccomqu71V4Wcv4SW3fzviM"

## node selector for pod assignment
##
## nodeSelector: {}

## Affinity for pod assignment
##
affinity: {}
  # nodeAffinity:
  #   requiredDuringSchedulingIgnoredDuringExecution:
  #   nodeSelectorTerms:
  #     - matchExpressions:
  #         - key: authorizer
  #           operator: In
  #           values:
  #             - "true"

## Tolerations for pod assignment
##
tolerations: []
#- key: authorizer
#  value: "true"
#  effect: NoSchedule

## Logging configuration
##
logging:
  ## log level
  ##
  level: info

## Enforcement configuration
##
enforcement:
  ## allow requests with no matching rule
  ##
  allowUnknown: false

service:
  ## kong-authorizer service type
  ##
  type: ClusterIP

  ## kong-authorizer service HTTP port
  ##
  port: 9003
  name: http

ingress:
  ## Enables the Ingress for kong-authorizer.
  ## This is only needed when Kong runs outside the cluster.
  ##
  enabled: false

  ## Ingress annotations
  ##

  ## Ingress hostnames with paths
  ##
  hosts:
    - host: kong-authorizer.kong-authorizer
      paths:
        - path: /authorize

  ## Ingress TLS configuration
  ## Secrets must be manually created in the namespace
  tls: []
  #  - secretName: kong-authorizer-tls
  #    hosts:
  #      - kong.domain.com

## Token exchange settings
##
tokenExchange:
  ## Enable token exchange (temporary until acp 2.0 is released)
  ##
  enabled: false

  ## Token exchange inject settings
  inject:
    ## Inject mode, defines what token should be send to the target service
    ## One of: InjectOriginalToken, InjectExchangedToken, InjectBothTokens
    ##
    mode: "InjectExchangedToken"

    headers:
      ## Original token header name
      ##
      originalToken: ""

      ## Exchanged token header name
      ##
      exchangedToken: "Authorization"

      ## strip bearer token
      ##
      stripBearer: false

## ACP http client configuration
##
# httpClient:
#   ## Set the ca.crt to the CA certificate used by ACP.
#   ## If you're exposing ACP with your own custom (not publicly trusted) certificates, Kong Authorizer needs to trust them.
#   ##
#   rootCa: |
#     -----BEGIN CERTIFICATE-----
#     -----END CERTIFICATE-----

## Additional kong-authorizer ConfigMap entries
## The data should match kong-authorizer configuration options
## https://docs.authorization.cloudentity.com/guides/developer/protect/kong/authz_config_reference/
##
# extraConfig: {}

## TODO MOVE TO values.yaml
httpServer:
  # Example self-signed cert used to serve HTTPS.
  cert: |
    -----BEGIN CERTIFICATE-----
    MIIEOjCCAyKgAwIBAgIUEfz65m4SgrhALNdiivOb7Gc/w4gwDQYJKoZIhvcNAQEL
    BQAwVzELMAkGA1UEBhMCVVMxEzARBgNVBAgTCldhc2hpbmd0b24xEDAOBgNVBAcT
    B1NlYXR0bGUxFDASBgNVBAoTC0Nsb3VkZW50aXR5MQswCQYDVQQLEwJDQTAeFw0y
    MTAxMjAwOTQ4MDBaFw0yNjAxMTkwOTQ4MDBaMIGLMQswCQYDVQQGEwJVUzEUMBIG
    A1UECBMLV2FzaGluZ2h0b24xEDAOBgNVBAcTB1NlYXR0bGUxFDASBgNVBAoTC0Ns
    b3VkZW50aXR5MRYwFAYDVQQLEw1BdXRob3JpemF0aW9uMSYwJAYDVQQDEx1hdXRo
    b3JpemF0aW9uLmNsb3VkZW50aXR5LmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEP
    ADCCAQoCggEBALrRAQwTTx69xYh0/dHOfg/mZot4ypLgcOh8YI/vWLJTNb6bJ0Jz
    akvZ8HahPT145fVTetJi583vAaYeQO5L9pnS7MXETLZeyYq7929HBbYfhggkrFS7
    ywVqKuStxS1ypQSnnF1F3/T6ft6AgNlSxWfIiCrOubMDMkEacpoMyXWSOthNSJvU
    sZHSZGMXc1LXlP69aVXtW5IvmZEFMjVMm4P8dQ2OlmoYeDznE6LbcsItORpeU37T
    oSdNgwGDIeRmNLMIup14AXTTRc1AokBzvsFN2dsPE+h4nFJRyR99aw+40DlqKB0n
    cPPaes09rgsccLACXfr0Aek/A8RPp0ZyJSMCAwEAAaOByDCBxTAOBgNVHQ8BAf8E
    BAMCBaAwHQYDVR0lBBYwFAYIKwYBBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQC
    MAAwHQYDVR0OBBYEFDH9o4OGiSL0cWjAbQCt5onLDUTUMB8GA1UdIwQYMBaAFMpZ
    B4RkFEn9Q7U/LsR9No6pW6NtMEYGA1UdEQQ/MD2CCWxvY2FsaG9zdIILdGVzdC1k
    b2NrZXKCHWF1dGhvcml6YXRpb24uY2xvdWRlbnRpdHkuY29thwR/AAABMA0GCSqG
    SIb3DQEBCwUAA4IBAQCJStJOdpbP0zNSTSbubB+Om6O6etnIBiqNaqmsqWGGzIdp
    OUBw6LFNbRDVrOOgHpb38Oja8VjpSd3HCnKKnjz7RgUBwP+ffLntvbZYx+5BIC9v
    MWGmOepJlKiBQk75HNpRbQbsqkVL8F0n4hxbn5tZ5qk8OtqahSLSxW75t5bHT5BJ
    bzCSl7+DLC5Sg1eYRfissLffmCVXutTYTU6YEZVd5LBEUAyd+A3c27u9/uD2suID
    A6jrG49GVNwUJwuXNF/YJPD+yYCpUMV5OGMq9pl11iZA8ohE2zSOMGLjJXediYns
    0a+v2EhtAFuMkn6c1NsjNqMddKQPfstqfBwU9ZJQ
    -----END CERTIFICATE-----
  # Example private key associated with cert.pem.
  certKey: |
    -----BEGIN RSA PRIVATE KEY-----
    MIIEpAIBAAKCAQEAutEBDBNPHr3FiHT90c5+D+Zmi3jKkuBw6Hxgj+9YslM1vpsn
    QnNqS9nwdqE9PXjl9VN60mLnze8Bph5A7kv2mdLsxcRMtl7Jirv3b0cFth+GCCSs
    VLvLBWoq5K3FLXKlBKecXUXf9Pp+3oCA2VLFZ8iIKs65swMyQRpymgzJdZI62E1I
    m9SxkdJkYxdzUteU/r1pVe1bki+ZkQUyNUybg/x1DY6Wahh4POcTottywi05Gl5T
    ftOhJ02DAYMh5GY0swi6nXgBdNNFzUCiQHO+wU3Z2w8T6HicUlHJH31rD7jQOWoo
    HSdw89p6zT2uCxxwsAJd+vQB6T8DxE+nRnIlIwIDAQABAoIBAH/g46OdcBJt+tJe
    qwQ8IiTGJTmhlKEXy5II2ZyNTRy8QtTXpfchxAhqBeVel+oFYPweibuMAnr/+RP6
    L54vF33SWUtDBPPtTG6QHl7osesqBvh6ChDyf5WUSApDPO7QRE88YJekZhpugfvS
    4OBifUh+h18uJQV50aOo8/updxnns9gqPThaheQpcL1a36UAhS62drcIG8jLk359
    jZ5/A1P0QMoBOJjwyHB1qqckN5l3BOuPPAuXyFsWGv8ax0j6EdUKTKvUQ7jYdoeF
    5+41uW04vC7n5EQewHpNSWp9jgg6t940cJRatiaIKO4LK/KyN4sVe1Ztg9H2Ii03
    gmevpdkCgYEA7I8RSVqlu0Uw5wYRPdJEB56/u+Ac34KDAkyDztCRjcOThrhLxsF0
    iOlLWHe3ReajWYfMeHtmORpx70vnjoAKmkIe4ii9+eWOQA5slQckdnB5W4xiRtL6
    I142R8S7VSfWBguHLeC+Pq7l4oXVVvG35wfRqAKBprJdLqEEApPhZFcCgYEAyitp
    YPmuqT79h9jwD9/LWu8JxeAlGJ66kIK9i7Q68YWLOoZk3rNAl/s1RR5x7wYJg7Sr
    xtpuyDHA4C/ann4ahYU19e9iBT91DVLhouNTbW/a/xr9nC9MfcxOS33zTSEFXW+y
    t/1+s4sal4ZGkyfCwyjq71JNZkVZM1+O3kZwJhUCgYA7Ubzx+gspJLaYmArmx71L
    c+F8iTx0R9P2VZ2P1PlK5UovNDO8SXKhim7cZljM7IL1xnndlIQTua/sY8pTD4SZ
    Hg+EgtbwvUGoinVsAXiBQr8L1+4k+G7FQ7C02n5nYi/nICjrtjm+mjkHTqwquz50
    bp+CU+6TEJMRSEsrIk4YzQKBgQChzHB/3hO8+96oNCScb70uP5SQury1oYMqWJge
    ENYDqZ8t7ZUY7ljJyZBuitkgNLK0p4m6keKLcdYtFd9fbQkIxv3SoAzQqmKhkS1n
    0YtZUGXyOMWzk98h5rrajCiGF+FVUCm2OriGNNPJZPtiljW3Py4W7sVnDiU/ikCq
    /7CNqQKBgQCL1lk7yQ572D8Sw+Z+sOc4Tk5aO9i394RE2DX3X810ZoAN4Q/1X61J
    64/OUsD3B2FF+WhkjsJAlLBYkVbJUfjY4OZywpnScLjJYTysYlrAArz+5RYEwYUi
    ulKp5/FbjejQNCJr6FD7xouVXUa1yNP8DMNEnhYI7rDGLqIMwEaVRw==
    -----END RSA PRIVATE KEY-----

## Array with environment variables to add to the container
##
extraEnvVars:
  # todo handle as config
  HTTP_CLIENT_INSECURE_SKIP_VERIFY: true
  KONG_HTTP_CLIENT_INSECURE_SKIP_VERIFY: true
  ACP_TLS_CLIENT_INSECURE_SKIP_VERIFY: true
  KONG_TLS_CLIENT_INSECURE_SKIP_VERIFY: true
  # kong
  KONG_ADMIN_URL: http://kong-kong-admin.kong-system:8001

