# Default values for openbanking.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

imagePullSecrets:
# - name: "image-pull-secret"

## Define serviceAccount names for components. Defaults to component's fully qualified name.
##
serviceAccounts:
  bank:
    create: true
    name:
    annotations: {}
  consentPage:
    create: true
    name:
    annotations: {}
  consentAdmin:
    create: true
    name:
    annotations: {}
  consentSelfservice:
    create: true
    name:
    annotations: {}
  financroo:
    create: true
    name:
    annotations: {}

acpURL: https://acp.local:8443

bank:
  ## If false, bank will not be installed
  ##
  enabled: true

  ## bank container name
  ##
  name: bank

  ## bank container image
  ##
  image:
    repository: cloudentity/openbanking-quickstart-bank
    tag: latest
    pullPolicy: IfNotPresent

  ## bank priorityClassName
  ##
  priorityClassName: ""

  ## Additional bank container arguments
  ##
  ## for example: persistence.file: /data/bank.data
  extraArgs: {}

  extraEnv:
    - name: CLIENT_ID
      value: bukj5p6k7qdmm5ppbi4g

  ## Additional InitContainers to initialize the pod
  ##
  extraInitContainers: []

  ## Define serviceAccount name. Defaults to component's fully qualified name.
  ##
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  ingress:
    ## If true, bank Ingress will be created
    ##
    enabled: false

    ## bank Ingress annotations
    ##
    annotations: {}
    #   kubernetes.io/ingress.class: nginx
    #   kubernetes.io/tls-acme: 'true'

    ## bank Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts: []
    #   - bank.domain.com
    #   - domain.com/bank

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## bank Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - bank.domain.com

  ## Node tolerations for bank scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations:
    []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node labels for bank pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to bank pods
  ##
  podAnnotations: {}

  ## Specify if a Pod Security Policy for node-exporter must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    annotations:
      {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  replicaCount: 1

  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## bank resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

  ## Security context to be added to push-gateway pods
  ##
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the bank service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 8070
    type: ClusterIP
  ## bank Deployment Strategy type
  # strategy:
  #   type: Recreate

consentPage:
  ## If false, consent-page will not be installed
  ##
  enabled: true

  ## consent-page container name
  ##
  name: consent-page

  ## consent-page container image
  ##
  image:
    repository: cloudentity/openbanking-quickstart-consent-page
    tag: latest
    pullPolicy: IfNotPresent

  ## consent-page priorityClassName
  ##
  priorityClassName: ""

  ## Additional consent-page container arguments
  ##
  ## for example: persistence.file: /data/consent-page.data
  extraArgs: {}

  extraEnv:
    - name: CLIENT_ID
      value: bv0ocudfotn6edhsiu7g
    - name: CLIENT_SECRET
      value: pMPBmv62z3Jt1S4sWl2qRhOhEGPVZ9EcujGL7Xy0-E0

  ## Additional InitContainers to initialize the pod
  ##
  extraInitContainers: []

  ## Define serviceAccount name. Defaults to component's fully qualified name.
  ##
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  ingress:
    ## If true, consent-page Ingress will be created
    ##
    enabled: true

    ## consent-page Ingress annotations
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-ssl-secret: "acp/bank-tls"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"

    ## consent-page Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts:
      - consent.local

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## consent-page Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - consent-page.domain.com

  ## Node tolerations for consent-page scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations:
    []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node labels for consent-page pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to consent-page pods
  ##
  podAnnotations: {}

  ## Specify if a Pod Security Policy for node-exporter must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    annotations:
      {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  replicaCount: 1

  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## consent-page resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

  ## Security context to be added to push-gateway pods
  ##
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the consent-page service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 8080
    type: ClusterIP
  ## consent-page Deployment Strategy type
  # strategy:
  #   type: Recreate

consentAdmin:
  ## If false, consent-admin will not be installed
  ##
  enabled: true

  ## consent-admin container name
  ##
  name: consent-admin

  ## consent-admin container image
  ##
  image:
    repository: cloudentity/openbanking-quickstart-consent-admin-portal
    tag: latest
    pullPolicy: IfNotPresent

  ## consent-admin priorityClassName
  ##
  priorityClassName: ""

  ## Additional consent-admin container arguments
  ##
  ## for example: persistence.file: /data/consent-admin.data
  extraArgs: {}

  extraEnv:
    - name: SYSTEM_CLIENT_ID
      value: bv2fe0tpfc67lmeti340
    - name: SYSTEM_CLIENT_SECRET
      value: v6yYaApda9juR_DrlI5mpdsdm9u2-D0rQIG9ynakyDE
    - name: SYSTEM_CLIENTS_SERVER_ID
      value: openbanking
    - name: LOGIN_AUTHORIZATION_SERVER_ID
      value: bank-admins
    - name: LOGIN_TENANT_ID
      value: default
    - name: LOGIN_CLIENT_ID
      value: bv2f80aed9c9is80f2d0
    - name: INTROSPECT_CLIENT_ID
      value: bv2fddlpfc67lmeti32g
    - name: INTROSPECT_CLIENT_SECRET
      value: RkAIOVRlP6ZLhDvYixT1wBb8DG3bVkXAouoIrX7cwzA

  ## Additional InitContainers to initialize the pod
  ##
  extraInitContainers: []

  ## Define serviceAccount name. Defaults to component's fully qualified name.
  ##
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  ingress:
    ## If true, consent-admin Ingress will be created
    ##
    enabled: true

    ## consent-admin Ingress annotations
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-ssl-secret: "acp/bank-tls"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"

    ## consent-admin Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts:
      - consent-admin.local

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## consent-admin Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - consent-admin.domain.com

  ## Node tolerations for consent-admin scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations:
    []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node labels for consent-admin pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to consent-admin pods
  ##
  podAnnotations: {}

  ## Specify if a Pod Security Policy for node-exporter must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    annotations:
      {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  replicaCount: 1

  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## consent-admin resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

  ## Security context to be added to push-gateway pods
  ##
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the consent-admin service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 8086
    type: ClusterIP

  ## consent-admin Deployment Strategy type
  # strategy:
  #   type: Recreate

consentSelfservice:
  ## If false, consent-self-service will not be installed
  ##
  enabled: true

  ## consent-self-service container name
  ##
  name: consent-self-service

  ## consent-self-service container image
  ##
  image:
    repository: cloudentity/openbanking-quickstart-consent-self-service-portal
    tag: latest
    pullPolicy: IfNotPresent

  ## consent-self-service priorityClassName
  ##
  priorityClassName: ""

  ## Additional consent-self-service container arguments
  ##
  ## for example: persistence.file: /data/consent-self-service.data
  extraArgs: {}

  extraEnv:
    - name: SYSTEM_CLIENT_ID
      value: buc3b1hhuc714r78env0
    - name: SYSTEM_CLIENT_SECRET
      value: PBV7q0akoP603rZbU0EFdxbhZ-djxF7FIVwyKaLnBYU
    - name: SYSTEM_CLIENTS_SERVER_ID
      value: openbanking
    - name: LOGIN_AUTHORIZATION_SERVER_ID
      value: bank-customers
    - name: LOGIN_TENANT_ID
      value: default
    - name: LOGIN_CLIENT_ID
      value: bv0nab0mekk67nekvq7g
    - name: INTROSPECT_CLIENT_ID
      value: bv2dkff8mll9cf6pvd6g
    - name: INTROSPECT_CLIENT_SECRET
      value: KThGH68f-gMC4cscGLFeOpIU4EYriYhKspOV9IwHbnw

  ## Additional InitContainers to initialize the pod
  ##
  extraInitContainers: []

  ## Define serviceAccount name. Defaults to component's fully qualified name.
  ##
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  ingress:
    ## If true, consent-self-service Ingress will be created
    ##
    enabled: true

    ## consent-self-service Ingress annotations
    ##
    annotations:
      kubernetes.io/ingress.class: nginx
      nginx.ingress.kubernetes.io/proxy-ssl-secret: "acp/bank-tls"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"

    ## consent-self-service Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts:
      - consent-ss.local

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## consent-self-service Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - consent-self-service.domain.com

  ## Node tolerations for consent-self-service scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations:
    []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node labels for consent-self-service pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to consent-self-service pods
  ##
  podAnnotations: {}

  ## Specify if a Pod Security Policy for node-exporter must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    annotations:
      {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  replicaCount: 1

  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## consent-self-service resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

  ## Security context to be added to push-gateway pods
  ##
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the consent-self-service service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 8085
    type: ClusterIP
  ## consent-self-service Deployment Strategy type
  # strategy:
  #   type: Recreate

import:
  enabled: true

  tenant: system

  verbose: true

  variables:
    developer_tpp_url: https://localhost:8090

financroo:
  ## If false, financroo will not be installed
  ##
  enabled: true

  ## financroo container name
  ##
  name: financroo

  ## financroo container image
  ##
  image:
    repository: cloudentity/openbanking-quickstart-financroo
    tag: latest
    pullPolicy: IfNotPresent

  ## financroo priorityClassName
  ##
  priorityClassName: ""

  ## Additional financroo container arguments
  ##
  ## for example: persistence.file: /data/financroo.data
  extraArgs: {}

  extraEnv:
    - name: DB_FILE
      value: /app/data/my.db

  ## Additional InitContainers to initialize the pod
  ##
  extraInitContainers: []

  ## Define serviceAccount name. Defaults to component's fully qualified name.
  ##
  serviceAccount:
    create: true
    annotations: {}
    name: ""

  ingress:
    ## If true, financroo Ingress will be created
    ##
    enabled: true

    ## financroo Ingress annotations
    ##
    annotations:
      nginx.ingress.kubernetes.io/proxy-ssl-secret: "acp/financroo-tls"
      nginx.ingress.kubernetes.io/backend-protocol: "HTTPS"
      nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
      nginx.ingress.kubernetes.io/ssl-redirect: "true"
      nginx.ingress.kubernetes.io/proxy-buffer-size: "8k"

    ## financroo Ingress hostnames with optional path
    ## Must be provided if Ingress is enabled
    ##
    hosts:
      - financroo.local

    ## Extra paths to prepend to every host configuration. This is useful when working with annotation based services.
    extraPaths: []
    # - path: /*
    #   backend:
    #     serviceName: ssl-redirect
    #     servicePort: use-annotation

    ## financroo Ingress TLS configuration
    ## Secrets must be manually created in the namespace
    ##
    tls: []
    #   - secretName: prometheus-alerts-tls
    #     hosts:
    #       - financroo.domain.com

  ## Node tolerations for financroo scheduling to nodes with taints
  ## Ref: https://kubernetes.io/docs/concepts/configuration/assign-pod-node/
  ##
  tolerations:
    []
    # - key: "key"
    #   operator: "Equal|Exists"
    #   value: "value"
    #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

  ## Node labels for financroo pod assignment
  ## Ref: https://kubernetes.io/docs/user-guide/node-selection/
  ##
  nodeSelector: {}

  ## Annotations to be added to financroo pods
  ##
  podAnnotations: {}

  ## Specify if a Pod Security Policy for node-exporter must be created
  ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/
  ##
  podSecurityPolicy:
    annotations:
      {}
      ## Specify pod annotations
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#apparmor
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#seccomp
      ## Ref: https://kubernetes.io/docs/concepts/policy/pod-security-policy/#sysctl
      ##
      # seccomp.security.alpha.kubernetes.io/allowedProfileNames: '*'
      # seccomp.security.alpha.kubernetes.io/defaultProfileName: 'docker/default'
      # apparmor.security.beta.kubernetes.io/defaultProfileName: 'runtime/default'

  replicaCount: 1

  ## PodDisruptionBudget settings
  ## ref: https://kubernetes.io/docs/concepts/workloads/pods/disruptions/
  ##
  podDisruptionBudget:
    enabled: false
    maxUnavailable: 1

  ## financroo resource requests and limits
  ## Ref: http://kubernetes.io/docs/user-guide/compute-resources/
  ##
  resources:
    {}
    # limits:
    #   cpu: 10m
    #   memory: 32Mi
    # requests:
    #   cpu: 10m
    #   memory: 32Mi

  ## Security context to be added to push-gateway pods
  ##
  securityContext:
    runAsUser: 65534
    runAsNonRoot: true

  service:
    annotations: {}
    labels: {}
    clusterIP: ""

    ## List of IP addresses at which the financroo service is available
    ## Ref: https://kubernetes.io/docs/user-guide/services/#external-ips
    ##
    externalIPs: []

    loadBalancerIP: ""
    loadBalancerSourceRanges: []
    servicePort: 8091
    type: ClusterIP
  ## financroo Deployment Strategy type
  # strategy:
  #   type: Recreate

bankFiles:
  data.json: |
    {
      "user": {
        "accounts": [
          {
            "AccountId": "22289",
            "Status": "Enabled",
            "StatusUpdateDateTime": "0001-01-01T00:00:00Z",
            "Currency": "GBP",
            "AccountType": "Personal",
            "AccountSubType": "CurrentAccount",
            "Nickname": "Bills",
            "Account": [
              {
                "SchemeName": "UK.OBIE.SortCodeAccountNumber",
                "Identification": "80200110203345",
                "Name": "Mr Kevin",
                "SecondaryIdentification": "00021"
              }
            ]
          },
          {
            "AccountId": "31820",
            "Status": "Enabled",
            "StatusUpdateDateTime": "0001-01-01T00:00:00Z",
            "Currency": "GBP",
            "AccountType": "Personal",
            "AccountSubType": "CurrentAccount",
            "Nickname": "Household",
            "Account": [
              {
                "SchemeName": "UK.OBIE.SortCodeAccountNumber",
                "Identification": "80200110203348",
                "Name": "Mr Kevin",
                "SecondaryIdentification": ""
              }
            ]
          }
        ],
        "balances": [
          {
            "AccountId": "22289",
            "Amount": {
              "Amount": "1230.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Credit",
            "Type": "InterimAvailable",
            "DateTime": "2017-04-05T10:43:07+00:00",
            "CreditLine": [
              {
                "Included": true,
                "Amount": {
                  "Amount": "1000.00",
                  "Currency": "GBP"
                },
                "Type": "Temporary"
              }
            ]
          },
          {
            "AccountId": "31820",
            "Amount": {
              "Amount": "57.36",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Type": "InterimBooked",
            "DateTime": "2017-05-02T14:22:09+00:00"
          },
          {
            "AccountId": "31821",
            "Amount": {
              "Amount": "99.36",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Type": "InterimBooked",
            "DateTime": "2017-05-02T14:22:09+00:00"
          }
        ],
        "transactions": [
          {
            "AccountId": "22289",
            "TransactionId": "123",
            "TransactionReference": "Ref 123",
            "Amount": {
              "Amount": "10.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Credit",
            "Status": "Booked",
            "BookingDateTime": "2020-04-05T10:43:07+00:00",
            "ValueDateTime": "2020-04-05T10:45:22+00:00",
            "TransactionInformation": "Cash from Aubrey",
            "BankTransactionCode": {
              "Code": "ReceivedCreditTransfer",
              "SubCode": "DomesticCreditTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "Transfer",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "230.00",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Credit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "567",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "100.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "IssuedCreditTransfer",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5678",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "200.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Entertainment",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5679",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "300.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5680",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "33.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31821",
            "BankId": "apexfinancial",
            "TransactionId": "5680",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "33.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          }
        ]
      },
      "user2": {
        "accounts": [
          {
            "AccountId": "11289",
            "Status": "Enabled",
            "StatusUpdateDateTime": "0001-01-01T00:00:00Z",
            "Currency": "GBP",
            "AccountType": "Personal",
            "AccountSubType": "CurrentAccount",
            "Nickname": "Bills",
            "Account": [
              {
                "SchemeName": "UK.OBIE.SortCodeAccountNumber",
                "Identification": "90200110203346",
                "Name": "Mr John",
                "SecondaryIdentification": "00021"
              }
            ]
          },
          {
            "AccountId": "44820",
            "Status": "Enabled",
            "StatusUpdateDateTime": "0001-01-01T00:00:00Z",
            "Currency": "GBP",
            "AccountType": "Personal",
            "AccountSubType": "CurrentAccount",
            "Nickname": "Household",
            "Account": [
              {
                "SchemeName": "UK.OBIE.SortCodeAccountNumber",
                "Identification": "70200110203341",
                "Name": "Mr John",
                "SecondaryIdentification": ""
              }
            ]
          }
        ],
        "balances": [
          {
            "AccountId": "22289",
            "Amount": {
              "Amount": "1230.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Credit",
            "Type": "InterimAvailable",
            "DateTime": "2017-04-05T10:43:07+00:00",
            "CreditLine": [
              {
                "Included": true,
                "Amount": {
                  "Amount": "1000.00",
                  "Currency": "GBP"
                },
                "Type": "Temporary"
              }
            ]
          },
          {
            "AccountId": "31820",
            "Amount": {
              "Amount": "57.36",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Type": "InterimBooked",
            "DateTime": "2017-05-02T14:22:09+00:00"
          },
          {
            "AccountId": "31821",
            "Amount": {
              "Amount": "99.36",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Type": "InterimBooked",
            "DateTime": "2017-05-02T14:22:09+00:00"
          }
        ],
        "transactions": [
          {
            "AccountId": "22289",
            "TransactionId": "123",
            "TransactionReference": "Ref 123",
            "Amount": {
              "Amount": "10.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Credit",
            "Status": "Booked",
            "BookingDateTime": "2020-04-05T10:43:07+00:00",
            "ValueDateTime": "2020-04-05T10:45:22+00:00",
            "TransactionInformation": "Cash from Aubrey",
            "BankTransactionCode": {
              "Code": "ReceivedCreditTransfer",
              "SubCode": "DomesticCreditTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "Transfer",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "230.00",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Credit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "567",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "100.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "IssuedCreditTransfer",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5678",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "200.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Entertainment",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5679",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "300.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5680",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "33.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31821",
            "BankId": "apexfinancial",
            "TransactionId": "5680",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "33.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          }
        ]
      },
      "user3": {
        "accounts": [
          {
            "AccountId": "11290",
            "Status": "Enabled",
            "StatusUpdateDateTime": "0001-01-01T00:00:00Z",
            "Currency": "GBP",
            "AccountType": "Personal",
            "AccountSubType": "CurrentAccount",
            "Nickname": "Bills",
            "Account": [
              {
                "SchemeName": "UK.OBIE.SortCodeAccountNumber",
                "Identification": "20200110203355",
                "Name": "Mr Jack",
                "SecondaryIdentification": "00021"
              }
            ]
          },
          {
            "AccountId": "45520",
            "Status": "Enabled",
            "StatusUpdateDateTime": "0001-01-01T00:00:00Z",
            "Currency": "GBP",
            "AccountType": "Personal",
            "AccountSubType": "CurrentAccount",
            "Nickname": "Household",
            "Account": [
              {
                "SchemeName": "UK.OBIE.SortCodeAccountNumber",
                "Identification": "62200110203341",
                "Name": "Mr Jack",
                "SecondaryIdentification": ""
              }
            ]
          }
        ],
        "balances": [
          {
            "AccountId": "22289",
            "Amount": {
              "Amount": "1230.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Credit",
            "Type": "InterimAvailable",
            "DateTime": "2017-04-05T10:43:07+00:00",
            "CreditLine": [
              {
                "Included": true,
                "Amount": {
                  "Amount": "1000.00",
                  "Currency": "GBP"
                },
                "Type": "Temporary"
              }
            ]
          },
          {
            "AccountId": "31820",
            "Amount": {
              "Amount": "57.36",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Type": "InterimBooked",
            "DateTime": "2017-05-02T14:22:09+00:00"
          },
          {
            "AccountId": "31821",
            "Amount": {
              "Amount": "99.36",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Type": "InterimBooked",
            "DateTime": "2017-05-02T14:22:09+00:00"
          }
        ],
        "transactions": [
          {
            "AccountId": "22289",
            "TransactionId": "123",
            "TransactionReference": "Ref 123",
            "Amount": {
              "Amount": "10.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Credit",
            "Status": "Booked",
            "BookingDateTime": "2020-04-05T10:43:07+00:00",
            "ValueDateTime": "2020-04-05T10:45:22+00:00",
            "TransactionInformation": "Cash from Aubrey",
            "BankTransactionCode": {
              "Code": "ReceivedCreditTransfer",
              "SubCode": "DomesticCreditTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "Transfer",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "230.00",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Credit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "567",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "100.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "IssuedCreditTransfer",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5678",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "200.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Entertainment",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5679",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "300.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31820",
            "TransactionId": "5680",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "33.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          },
          {
            "AccountId": "31821",
            "BankId": "apexfinancial",
            "TransactionId": "5680",
            "TransactionReference": "Ref 124",
            "Amount": {
              "Amount": "33.00",
              "Currency": "GBP"
            },
            "CreditDebitIndicator": "Debit",
            "Status": "Booked",
            "BookingDateTime": "2020-05-02T14:22:09+00:00",
            "ValueDateTime": "2020-05-02T14:22:09+00:00",
            "TransactionInformation": "Paid the gas bill",
            "AddressLine": "Coventry",
            "BankTransactionCode": {
              "Code": "Clothes",
              "SubCode": "AutomaticTransfer"
            },
            "ProprietaryBankTransactionCode": {
              "Code": "DirectDebit",
              "Issuer": "AlphaBank"
            },
            "Balance": {
              "Amount": {
                "Amount": "57.36",
                "Currency": "GBP"
              },
              "CreditDebitIndicator": "Debit",
              "Type": "InterimBooked"
            }
          }
        ]
      }
    }
